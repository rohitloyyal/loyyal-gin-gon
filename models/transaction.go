package models

import (
	"encoding/json"
	"time"
)

type Transaction struct {
	DocType string `json:"type"`
	// Creator is the API user that is requesting the transaction be created
	Creator string `json:"creator"`
	Channel string `json:"channel"`

	// ExtID is the user supplied ID for the transaction.
	//
	// It is unique to the transaction (N1QL write will fail on a collision).
	ExtID string `json:"ext"`

	// RefID is the offchain ID of the transaction generated by the API and
	// used to both deduplicate requests to chaincode and obfuscate the
	// user supplied ID.
	//
	// It is unique to the transaction (chaincode will fail on a collision).
	RefID string `json:"ref"`

	// UUID is the onchain UUID of the transaction generated (and
	// guaranteed to be unique) by chaincode.
	//
	// It is unique to the transaction (chaincode will fail on a collision).
	//
	// TODO(voutasaurus): consider renaming this to be more specific about
	// the providence of this ID.
	UUID string `json:"tx_uuid"`

	// Timestamp is the time that the transaction was written to the chain.
	// Timestamps are stored in UnixNano format.
	RawTimestamp int64 `json:"ts"`

	// FromExtID is the wallet external ID to transfer from. If FromExtID
	// is empty then the transaction is an issue.
	FromExtID string `json:"from_extid"`
	FromUUID  string `json:"from_uuid"`

	// ToExtID is the wallet external ID to transfer to.
	ToExtID string `json:"to_extid"`
	ToUUID  string `json:"to_uuid"`

	// Currency is the currency to transfer.
	// TODO: make wallets currency specific in the DB.
	// TODO: make wallet create use default currency.
	Currency string `json:"currency"`

	// Amount is the amount of the currency to transfer.
	Amount int64 `json:"amount"`

	// Spend defers the update of the balance of the To wallet in order to
	// unblock chain operations.
	Spend bool `json:"spend"`

	// Metadata
	Metadata json.RawMessage `json:"metadata"`

	// Remarks (system generated remarks only)
	Remarks string `json:"remarks"`

	// Error is the recorded chaincode error result if any.
	Error string `json:"errmsg"`

	TransactionType string `json:"transactionType"`
	AppliedContract string `json:"appliedContract"`
	// capture the details of the actual user who initiates the transaction. F
	// for example, partner name in case of redeemption where partner initiates the transaction on behalf of the customer
	TransactionInitiatedBy string    `json:"transactionInitiatedBy"`
	CreatedOn              time.Time `json:"createdOn"`
}

// type TransactionReadOnlys struct {
// 	// Kind is either issue or transfer depending on the value of the From
// 	// string. READONLY.
// 	Kind string `json:"kind,omitempty"`

// 	// Timestamp is the time that the transaction was appended to the
// 	// chain. Timestamps are in RFC3339 format. READONLY.
// 	Timestamp *time.Time `json:"timestamp,omitempty"`

// 	// Error is the user visible message for Rejected transactions.
// 	Error string `json:"error,omitempty"`
// }

// type TransactionSearch struct {
// 	Transaction
// 	TransactionSearchOpts
// }

// type TransactionSearchResponse struct {
// 	Transactions []*Transaction         `json:"transactions"`
// 	Stats        TransactionSearchStats `json:"stats"`
// }

// type TransactionSearchStats struct {
// 	Sum int64 `json:"sum"`
// }

// type TransactionSearchOpts struct {
// 	// Since is a search parameter that will select all transactions after
// 	// the given timestamp, including any with that exact timestamp.
// 	// Timestamps are in RFC3339 format.
// 	Since *time.Time `json:"since,omitempty"`

// 	// Until is a search parameter that will select all transactions before
// 	// the given timestamp, including any with that exact timestamp.
// 	// Timestamps are in RFC3339 format.
// 	Until *time.Time `json:"until,omitempty"`

// 	// Offset is a search parameter that can be used to paginate records.
// 	Offset int64 `json:"offset,omitempty"`

// 	// Limit is a search parameter that will limit the number of records
// 	// returned.
// 	Limit int64 `json:"limit,omitempty"`

// 	// AtLeast is a search parameter for Amount, return only records that
// 	// are at least this amount. If 0 then all amounts are valid.
// 	AtLeast int64 `json:"at_least,omitempty"`

// 	// AtMost is a search parameter for Amount, returning only records that
// 	// are at most this amount. If 0 then all amounts are valid.
// 	AtMost int64 `json:"at_most,omitempty"`

// 	// Status can be used to filter for pending / completed transactions.
// 	// If it is not set, both types of transactions will be returned.
// 	Status string

// 	// Wallet filters for matches on either ToExtID or FromExtID.
// 	Wallet string
// }
